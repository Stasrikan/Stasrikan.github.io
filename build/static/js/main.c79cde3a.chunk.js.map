{"version":3,"sources":["logo.svg","API/Login.js","Includes/Error.jsx","Includes/Success.jsx","Pages/Login.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","startLogin","email","password","a","data","captcha_key","gift_code_sku_id","login_source","undelete","fetch","method","headers","body","JSON","stringify","then","response","json","result","ok","token","status","error","Object","values","Error","text","className","src","alt","Success","Login","getFormData","event","preventDefault","document","querySelector","querySelectorAll","forEach","input","name","value","console","log","useState","resp","setResp","action","type","placeholder","onClick","login","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,6ICA5B,SAAeC,EAA9B,oC,4CAAe,WAA0BC,EAAOC,GAAjC,mBAAAC,EAAA,6DAIVC,EAAO,CACVC,YAAa,KACbJ,MAAOA,EACPK,iBAAkB,KAClBC,aAAc,KACdL,SAAUA,EACVM,UAAU,GAVG,SAeOC,MAAM,wCAAyC,CACnEC,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAUV,KACnBW,MAAK,SAACX,GAAD,OAAUA,KArBJ,cAeVY,EAfU,gBAyBKA,EAASC,OAzBd,UAyBVC,EAzBU,QA6BVF,EAASG,GA7BC,yCAiCN,CACNC,MAAOF,EAAOE,MACdC,QAAQ,IAnCI,gCAyCP,CACNC,MAAOC,OAAOC,OAAON,GAAQ,GAAG,GAChCG,QAAQ,IA3CK,6C,sBCSAI,MARf,YAA0B,IAATC,EAAQ,EAARA,KAChB,OACC,yBAAKC,UAAU,gCACd,yBAAKA,UAAU,OAAOC,IAAI,iBAAiBC,IAAI,UAC/C,2BAAIH,KCIQI,MARf,WACC,OACC,yBAAKH,UAAU,kCACd,yBAAKA,UAAU,OAAOC,IAAI,mBAAmBC,IAAI,YACjD,wHCkDYE,MAnDf,WACC,SAASC,EAAYC,GACpBA,EAAMC,iBACN,IAAI9B,EAAO,GAOX,OANW+B,SAASC,cAAc,eAChBC,iBAAiB,SAC5BC,SAAQ,SAACC,GACfnC,EAAKmC,EAAMC,MAAQD,EAAME,SAE1BC,QAAQC,IAAIvC,GACLA,EAVQ,MAYMwC,mBAAS,GAZf,mBAYXC,EAZW,KAYLC,EAZK,KAahB,OACC,0BAAMnB,UAAU,+CACf,oIACA,0BAAMoB,OAAO,GAAGpB,UAAU,6BACzB,yBAAKA,UAAU,mBACd,2BACCa,KAAK,QACLQ,KAAK,OACLrB,UAAU,oBACVsB,YAAY,oCAGd,yBAAKtB,UAAU,mBACd,2BACCa,KAAK,WACLQ,KAAK,WACLrB,UAAU,uBACVsB,YAAY,0CAGd,4BACCC,QAAO,uCAAE,WAAOjB,GAAP,qBAAA9B,EAAA,6DACJC,EAAO4B,EAAYC,GACVhC,EAAoBG,EAA3B+C,MAAcjD,EAAaE,EAAbF,SAFZ,SAGaF,EAAWC,EAAOC,GAH/B,OAGJc,EAHI,OAIR8B,EAAQ9B,GACR0B,QAAQC,IAAIE,GALJ,2CAAF,sDAOPG,KAAK,SACLrB,UAAU,sBATX,kCAaCkB,EAAOA,EAAKxB,OAAS,kBAAC,EAAD,MAAc,kBAAC,EAAD,CAAOK,KAAMmB,EAAKvB,QAAY,MCrCvD8B,MARf,WACC,OACC,yBAAKzB,UAAU,OACd,kBAAC,EAAD,QCIiB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLoB,QAAQpB,MAAMA,EAAM8C,c","file":"static/js/main.c79cde3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default async function startLogin(email, password) {\n\t/*\n        Создание данных для отправки запроса\n    */\n\tlet data = {\n\t\tcaptcha_key: null,\n\t\temail: email,\n\t\tgift_code_sku_id: null,\n\t\tlogin_source: null,\n\t\tpassword: password,\n\t\tundelete: false,\n\t};\n\t/*\n        Отправляем запрос\n    */\n\tlet response = await fetch(\"https://discord.com/api/v6/auth/login\", {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"content-type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify(data),\n\t}).then((data) => data);\n\t/*\n    \tполучаем ответ\n\t*/\n\tlet result = await response.json();\n\t/*\n\t\tЕсли статус успешно, то возвращаем токен, иначе возвращаем ошибку\n\t */\n\tif (response.ok) {\n\t\t/*\n\t\t   \tвозвращаем токен\n\t\t*/\n\t\treturn {\n\t\t\ttoken: result.token,\n\t\t\tstatus: true,\n\t\t};\n\t}\n\t/*\n\t\tПолучаем текст ошибки и возвращаем ее\n\t*/\n\treturn {\n\t\terror: Object.values(result)[0][0],\n\t\tstatus: false,\n\t};\n}\n","import React from \"react\";\nfunction Error({ text }) {\n\treturn (\n\t\t<div className=\"error-wrapper flex-container\">\n\t\t\t<img className=\"icon\" src=\"imgs/error.svg\" alt=\"Error\" />\n\t\t\t<p>{text}</p>\n\t\t</div>\n\t);\n}\nexport default Error;\n","import React from \"react\";\nfunction Success() {\n\treturn (\n\t\t<div className=\"success-wrapper flex-container\">\n\t\t\t<img className=\"icon\" src=\"imgs/success.svg\" alt=\"Success\" />\n\t\t\t<p>Вы успешно вошли!</p>\n\t\t</div>\n\t);\n}\nexport default Success;\n","import React, { useState } from \"react\";\nimport startLogin from \"../API/Login\";\nimport Error from \"../Includes/Error\";\nimport Success from \"../Includes/Success\";\nfunction Login() {\n\tfunction getFormData(event) {\n\t\tevent.preventDefault();\n\t\tlet data = {};\n\t\tlet form = document.querySelector(\".login-form\");\n\t\tlet inputs = form.querySelectorAll(\"input\");\n\t\tinputs.forEach((input) => {\n\t\t\tdata[input.name] = input.value;\n\t\t});\n\t\tconsole.log(data);\n\t\treturn data;\n\t}\n\tlet [resp, setResp] = useState(0);\n\treturn (\n\t\t<main className=\"container flex-container login-form-wrapper\">\n\t\t\t<h1>Введите данные от Discord</h1>\n\t\t\t<form action=\"\" className=\"login-form flex-container\">\n\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"login\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"login-form__login\"\n\t\t\t\t\t\tplaceholder=\"Логин\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tclassName=\"login-form__password\"\n\t\t\t\t\t\tplaceholder=\"Пароль\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={async (event) => {\n\t\t\t\t\t\tlet data = getFormData(event);\n\t\t\t\t\t\tlet { login: email, password } = data;\n\t\t\t\t\t\tlet response = await startLogin(email, password);\n\t\t\t\t\t\tsetResp(response);\n\t\t\t\t\t\tconsole.log(resp);\n\t\t\t\t\t}}\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tclassName=\"login-form__submit\"\n\t\t\t\t>\n\t\t\t\t\tВойти\n\t\t\t\t</button>\n\t\t\t\t{resp ? resp.status ? <Success /> : <Error text={resp.error} /> : \"\"}\n\t\t\t</form>\n\t\t</main>\n\t);\n}\nexport default Login;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Login from \"./Pages/Login\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Login />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}